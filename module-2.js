// const friends = ['Mango', 'Kivi', 'Poly', 'Ajax'];
// console.table(friends);
//
// friends[1] = "cdvdv";
// friends[3] = 11111;
//
//
// console.table(friends)

// //!–ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
// let a = 10;
// let b = a;
//
// console.log(a);
// console.log(b);
//
// //!–ø–æ —Å—Å—ã–ª–∫–µ
// let friends = ['Mango', 'Kivi', 'Poly', 'Ajax'];
// let bi = friends;
//
// // console.log(friends);
// // console.log(bi);
//
// friends[0] = 500;
//
// console.log("friends", friends); //[500, 'Kivi', 'Poly', 'Ajax']
// console.log("bi", bi); //[500, 'Kivi', 'Poly', 'Ajax']
//
// console.log(friends === bi); //true

// //!–ø–µ—Ä–µ–±–æ—Ä –º–∞—Åc–∏–≤–∞
// let friends = ['Mango', 'Kivi', 'Poly', 'Ajax'];
// console.table(friends);
//
// for (let i = 0; i <= friends.length-1; i += 1) {
//     console.log(i);
//     friends[i] += `-1`
// }
//
// //*–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —ç–µ–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
// for (const friend of friends){
//     console.log(friend) //–∫–æ–ø–∏—è
// }
// // console.table(friends);

//
// const cart = [54, 28, 105, 70, 92, 17, 120];
// let total = 0;
//
// // for (let i = 0; i < cart.length; i += 1) {
// //     // console.log(cart[i])
// //     total += cart[i]
// //     //total = total + cart[i]
// // }
//
// for (const value of cart) {
//     total += value
// }
//
// console.log("Total:", total)

//
// const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
// let total = 0;

// for (let i = 0; i < numbers.length; i += 1) {
//     const number = numbers[i];
//     console.log(number);
//
//     if (number % 2 === 0) {
//         console.log("—á–µ—Ç–Ω–æ–µ")
//         total += number
//     }
// }

// for (const number of numbers){
//     console.log(number);
//     if (number % 2 === 0) {
//         console.log("—á–µ—Ç–Ω–æ–µ")
//         total += number
//     }
// }
//
// console.log("TOTAl", total);


// const logins = ['m4ngoDoge', 'k1widab3st', 'podvsvf1vf', 'ddsfcs1aj']
// const loginToFind = 'podvsvff1vf';
// let message = '';
// for (const login of logins){
//
// }
// for (let i = 0; i < logins.length; i += 1) {
//     const login = logins[i];
// console.log("login", login)
//
//     if (login === loginToFind) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω`;
//         break;
//     }
//     message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
//
// }
//
// console.log(message)

// const a = 15 > 10 ? "–∞–≥–∞" : "–Ω–µ—Ç";
// const message = logins.includes(loginToFind) ? "–∞–≥–∞" : "–Ω–µ—Ç";
// console.log(message)

//! –ü–µ—Ä–µ–±–æ—Ä –º–∞c—Å–∏–≤–∞
// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0];
//
// for (const number of numbers){
//     if(number > smallestNumber){
//         smallestNumber = number;
//     }
// }
// console.log(smallestNumber);


// const friends = ['Mango', 'Kivi', 'Poly', 'Ajax'];
// // let string = '';
// let string = friends.join(",");
// console.log(string);

// for (friend of friends) {
//     string += friend + ',';
// }
//
// string = string.slice(0, string.length-1)
// // console.log(string.slice(0, -1))//–Ω–æ–≤–∞—è –∫–æ–ø–∏—è
// console.log(string)


// const string = "JavaScript";
// const letters = string.split('');
// let invertedString = '';
//
// console.log(letters);
// for (const letter of letters) {
//     // console.log(letter)
//     //
//     // if (letter === letter.toLowerCase()) {
//     //     console.log("–≠—Ç–æ –±—É–∫–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ", letter);
//     //     invertedString += letter.toUpperCase();
//     // } else {
//     //     invertedString += letter.toLowerCase();
//     // }
//
//     invertedString += letter === letter.toLowerCase() ? letter.toUpperCase() : letter.toLowerCase();
// }
//
// console.log(invertedString);


// const title = "Top 10 benefits of React framework";
//
// // const normalizedString = title.toLowerCase();
// // // console.log(normalizedString)
// //
// // const words = normalizedString.split(" ");
// // // console.log(words);
// //
// // const slug = words.join("-")
// // // console.log(slug);
//
// const slug1 = title.toLowerCase().split(" ").join("-");
// console.log(slug1)


// const array1 = [5, 10, 15, 20];
// const array2 = [10, 20, 30];
// let total = 0;
//
// const numbers = array1.concat(array2, [1, 2 ,5], [60, 90])
// console.table(numbers);
//
// for (const number of numbers) {
//     total += number;
// }
// console.log(total);


// const cards = [
//     "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-1",
//     "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-2",
//     "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-3",
//     "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-4",
//     "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-5",
// ];
// console.table(cards)

// const cardToRemove = "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-3";
// const index = cards.indexOf(cardToRemove);
// console.log(index);

// cards.splice(index, 1);
//
// console.table(cards);


// const cardToInsert = "–ö–∞—Ä–æ—Ç–æ—á–∫–∞-6";
// const index = 3;
// cards.splice(4, 0, cardToInsert);
//
// console.table(cards)


// const cardToUpdate = "j –ö–∞—Ä–æ—Ç–æ—á–∫–∞-4";
// cards.splice(3,1,cardToUpdate);
// console.log(cards)


// function calculateEngravingPrice(message, pricePerWord) {
//
//  let split =  message.split(" ");
// console.log(split.length * pricePerWord)
//     return
// }
//
// calculateEngravingPrice("JavaScript is in my blood", 10);
// calculateEngravingPrice("JavaScript is in my blood", 20);
// calculateEngravingPrice("Web-development is creative work", 40);
// calculateEngravingPrice("Web-development is creative work", 20);


// function slugify(title) {
//     // let array = title
//     return  title.toLowerCase().split(" ").join("-");
//
// }
//
// slugify("Arrays for begginers");
// slugify("English for developer")


// function makeArray(firstArray, secondArray, maxLength) {
//
//    let ddd =  firstArray.concat(secondArray)
//  // console.log(ddd);
//
//    if(ddd.length > maxLength){
//        console.log(ddd.slice(0, maxLength))
//    }else{
//     console.log(ddd)
//    }
//
//     return
// }
// makeArray(['Earth', 'Jupiter'], ['Neptune', 'Uranus'], 4);
// makeArray(["Mango", "Poly"], ["Ajax", "Chelsea"], 3);
// makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 2)

//
// const start = 3;
// const end = 7;
//
// for (let i = start; i <= end ; i += 1) {
//     console.log(i);
// }


/*
/! Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
–°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
   1. –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
   2.  –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
   3.  –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
   4.  –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
   5. –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
 */

// const genres = ['Jazz', 'Blues'];
// //1
// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª')
// console.log("1 –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è: ",genres)
// //2
// console.log("2 –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É: ",genres[0]);
// //3
// // genres.length-1;
// console.log("3 –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É: ",genres[genres.length-1]);
// //4
// //  console.log("4 –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å: ",genres.shift());
// //5
// genres.splice(0, 0, "Country","Reggae");
// console.log("5 –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É: ", genres)


/**
 /! Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
 –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.
 –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
 */

//     const values = '8 11';
// const valueArray = values.split(" ")
// console.log(valueArray);
//
// const square = valueArray[0] * valueArray[1]
// console.log("–ü–ª–æ—â–∞:", square)
//
// const a = Number(valueArray[0]);
// const b = Number(valueArray[1]);
// console.log("–ü–ª–æ—â–∞:", a * b)


/**
 !* Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
 –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for.
 –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 */

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã', 'üçí'];
// for(const fruit of fruits) { //–ø–µ—Ä–µ–±–∏—Ä–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è
//     let num = fruits.indexOf(fruit);
//     console.log(num + 1 + ':' + fruit);
// }


// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã', 'üçí'];
// for(const i in fruits) { // –ø–µ—Ä–µ–±–∏—Ä–∞—î —ñ–Ω–¥–µ–∫—Å–∏ (i - —Å—Ç—Ä–æ–∫–∞)
//     console.log(Number(i)+1 ,':' ,  fruits[i]);
// }

/*
!* Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ.
–†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É.
–°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.
*/


//     const string = 'Welcome to the future';
// const valueArray = string.split(" ")
// console.log(valueArray);
//
// valueArray.shift();
//  valueArray.pop();
//
// const newString = valueArray.join(" ");
//
// console.log(newString);
// console.log(valueArray);
//

/*
!* Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
*/

// const stringArrow = 'Welcome to the future';
// const valueArray = stringArrow.split("").reverse().join("")
// console.log(valueArray);


// let newString = [];
// const newArray = stringArrow.split("")
//
// for (let i = newArray.length - 1; i >= 0; i -= 1) {
//     newString.push(newArray[i])
// }
//
// newString = newString.join("")
// console.log(newString)

/*
Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —ñ–∑ —Ü–∏–∫–ª–æ–º
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é –µ–ª–µ–º–µ–Ω—Ç–∞.
*/

/*let temp = langs[1];
langs[1] = langs [2];
langs[2] = temp;*/

/*
1. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü–∏–∫–ª, —è–∫–∏–π –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏—Å—å –ø–æ –≤—Å—ñ–º –µ–ª–µ–º–µ–Ω—Ç–∞–º(–ø–æ —ñ–Ω–¥–µ–∫—Å–∞–º)
2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–∏–π —Ü–∏–∫–ª, —è–∫–∏–π –±—É–¥–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ —ñ–Ω–¥–µ–∫—Å—É  –≥–∞ –æ–¥–∏–Ω –±—ñ–ª—å—à–µ i ( –Ω–µ –∑ 0)
3. –ü–æ—Ä—ñ–≤–Ω–±—î–º–æ –ø–µ—Ä—à—ñ –±—É–∫–≤–∏ —Å—É—Å—ñ–¥–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    3.1 –Ø–∫—â–æ –±—É–∫–≤–∞ –∑–ª—ñ–≤–∞ –±—ñ–ª—à–∞ –∑–∞ –±—É–∫–≤—É —Å–ø—Ä–∞–≤–∞, —Ç–æ –º—ñ–Ω—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –º—ñ—Å—Ü—è–º–∏
    3.2
 */

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];

// for (let i = 0; i < langs.length-1; i += 1) {
//     // console.log(`El: ${langs[i]} | i: ${i}`)
//     for (let j = i + 1; j < langs.length; j += 1) {
//         // console.log(`\tEl: ${langs[j]} | j: ${j}`)
//
//         if (langs[i][0] > langs[j][0]) {
//             let temp = langs[i];
//             langs[i] = langs [j];
//             langs[j] = temp;
//         }
//     }
//     // console.log("\n")
// }
// console.log(langs)
// console.log(langs.sort())

/*
Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.
*/
// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[0];
//
// for (const num of numbers) {
//     if(num < min) min = num;
// }
//
// console.log(min); // 1


// function calculateTotal(number) {
//
//     // let numbers = [];
//     let num = 0;
//     for (let i = 0; i <= number; i += 1) {
//         num += i;
//         console.log(num)
//     }
// return num
// }
//
// calculateTotal(7); //28

// const fruits = ['apple', 'plum', 'pear', 'orange'];
//
// for (let i = 0; i< fruits.length; i+=1) { // Change this line
//     const fruit = fruits[i]; // Change this line
//     console.log(fruit);
// }


// function calculateTotalPrice(order) {
//     let total = 0;
//
//     for (const num of order) {
//         total += num
//     }
//     return total;
// }
// calculateTotalPrice([164, 48, 291])

// function findLongestWord(string) {
// let mas = string.split(" ")
//
//     let total;
//     if (string[0] > string[1]) {
//         total = string[0]
//     }else if(){
//
//     }
//
//
// console.log(mas)
// }
//
// findLongestWord("May the force be with you")


/*
! fffffffffffff
 */

// const fn = function (a, b) {
//
//     console.log(1)
//
//     console.log(2)
//
//     console.log(3)
//     return 555
// }
//
// console.log(fn())

// const cart = [54, 28, 105, 70, 92, 17, 120, 12, 25, 90];


// const fn =  function (cart){
//     let total = 0;
//
//     for (const value of cart){
//         total += value
//     }
//     // console.log("Total: " , total);
//     return total
// }
//
// console.log(fn([54, 28, 105, 70, 92, 17, 120, 12, 25, 90])) ;
// fn([54, 28, 92, 17, 120, 12, 25, 90]);

// const logins = ['sdfvgdb', 'sdvsvsdvf', 'rrrww', "eeee9e7f"]
//
// const findlogin = function (allLogins, loginToFind) {
//     // for (const login of allLogins){
//     //     if(loginToFind === login){
//     //       return  `Yes ${loginToFind}`
//     //     }
//     // }
//     //includes -> true/false
//     return allLogins.includes(loginToFind)
//         ? `Yes ${loginToFind}`
//         : `No ${loginToFind}`
// }
//
// console.log(findlogin(logins, 'ssssss'));
// console.log(findlogin(logins, 'rrrww'));
// console.log(findlogin(logins, 'eeee9e7f'));

// const cart = [54, 28, 105, 70, 92, 17, 120, 12, 25, 90];


// console.log(smallestNumber);

// const findSmallesNumber = function (numbers) {
//     let smallestNumber = numbers[0];
//
//     for (const number of numbers) {
//         if (number < smallestNumber) {
//             smallestNumber = number
//         }
//     }
//     return smallestNumber
// }
//
// console.log(findSmallesNumber([54, 92, 17,  25, 90]));
// console.log(findSmallesNumber([54, 17, 120, 12, 25, 90]));
// console.log(findSmallesNumber([57, 4, 58, 2, -2, 90]));


// const changeCace = function (string) {
//     const letters = string.split('');
//     let invertedString = '';
//
//     for (const letter of letters) {
//       invertedString += letter === letter.toLowerCase()
//             ? letter.toUpperCase() : letter.toLowerCase();
//     }
//
//     return invertedString
// }
//
// console.log(changeCace('efwsgews'));
// console.log(changeCace('WWWcdkcnsj'));
// console.log(changeCace('65uFFYVbhb j'));

// const slugfigy = function (string) {
//     const slug = string.toLowerCase().split(" ").join("-");
//     return slug
// }
//
// console.log(slugfigy("Top 10 benefits of React framework"));
// console.log(slugfigy("Top 20 benefits of React framework"));
// console.log(slugfigy("Top 30 benefits of React framework"));


// const fn = function (...args) {
//     console.log(args)
//
// }
// const fn = function (a, b , c,...args) {
//     console.log(`${a}, ${b}, ${c}`)
//     console.log(args)
//
// }
// fn("hhh",1,2,3)
// fn("sssh",1,2,3,4,5)
// fn("stth",1,2,3,4,5,6,7)


// const add = function (...args){
//     console.log(args)
//
//     let total = 0;
//     for (const arg of args) {
//         total += arg
//     }
//     return total
// }
//
// console.log(add(1,2,3))
// console.log(add(1,2,3,4,5))
// console.log(add("stth",1,2,3,4,5,6,7))

// const filterNumbers = function (array, ...args) {
//     // console.log("array: ", array);
//     // console.log("args: ", args);
//     const newElements = [];
//
//     for (const element of array) {
//         if(args.includes(element)){
//             newElements.push(element)
//             // console.log(`${element} –µ—Å—Ç—å –≤–µ–∑–¥–µ `)
//         }
//     }
//     return newElements
// }
//
// console.log(filterNumbers([5, 2, 9, 4, 1], 1, 2, 3)) //[2, 1]
// console.log(filterNumbers([50, 20, 90, 40, 10], 1, 20, 3, 4, 50)) //[50, 20]
// console.log(filterNumbers([500, 200, 900, 400, 100], 100, 2, 3, 4, 500, 6, 7)) //[500, 100]


/*
! Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏.
–î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.
–í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏.
–ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.
–Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;
*/


// function calcBMI(weight, height) {
//     weight = convertToDecimal(weight)
//     height = convertToDecimal(height)
//
//     const result = Number(weight / Math.pow(height, 2))
//
//     return getFixedNumber(result)
// }
//
// function convertToDecimal(str) {
//     return Number(str.replace(",", "."));
// }
//
// function getFixedNumber(num) {
//     return Number(num.toFixed(1))
// }
//
// const bmi = calcBMI("88,3", "1.75");
// console.log(bmi); // 28.8


// function foo() {
//     console.log(arguments)
//     console.log("Old ", Array.from(arguments));
//
//     const arr = [];
//     for (let i = 0; i < arguments.length; i += 1) {
//         arr[i] = arguments[i];
//     }
//     console.log("long",arr);
// }
//
// foo('sss', 4, false, null)

/*
!Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.
*/
//
// function min(a, b) {
//     return a < b ? a : b
//
//     // return Math.min(a, b)
// }
//
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1

/*
! Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
 –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.
*/
// function findLargestNumber(numbers) {
//     let max = numbers[0]
//
//     for (const number of numbers) {
//         if (number > max) max = number
//     }
//     return max
// }
//
// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83

/*
! Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ
–ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.
*/

// function calAverage() {
//     const amount = arguments.length;
//     let sum = 0;
//
//     for (const number of arguments) {
//         sum += number
//     }
//     return sum / amount
// }
//
// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2

/*
! Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç. –¥.)
–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:

addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ
*/

// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];
//
// function addCourse(name) {
//     if (courses.includes(name)) console.log("–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å")
//     else courses.push(name)
// }
//
// function removeCourse(name) {
//     const index = courses.indexOf(name);
//     console.log(index)
//     if (index === -1) console.log("–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
//     else courses.splice(index, 1)
// }
//
// function updateCourse(oldName, newName) {
//     const index = courses.indexOf(oldName);
//     if (index === -1) console.log("–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
//     else if (courses.includes(name)) console.log("–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å")
//     else courses.splice(index, 1, newName)
// }
//
//
// addCourse('Express');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// addCourse('CSS'); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'
//
// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// removeCourse('Vue'); // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
//
// updateCourse('Express', 'NestJS');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']

// function findLongestWord(string) {
//     let arr = string.split(" ")
//     let total = " ";
//
//     for (const arrElement of arr) {
//         if(arrElement.length > total.length){
//             total = arrElement
//         }
//     }
//     return total
// }
//
// findLongestWord("May the force be with you")
// findLongestWord("The quick brown fox jumped over the lazy dog")

/*
–î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ createArrayOfNumbers(min, max) —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è min –¥–æ max.
*/
// function createArrayOfNumbers(min, max) {
//     const numbers = [];
//
//     for (let i = min; i <= max; i += 1) {
//          numbers.push(i)
//     }
//     // return numbers;
//     console.log(numbers)
// }
//
// createArrayOfNumbers(1, 3);

/*
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é filterArray(numbers, value), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–∞—Ä–∞–º–µ—Ç—Ä numbers)
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ numbers, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value (—á–∏—Å–ª–æ).
*/
// function filterArray(numbers, value) {
//     const newArray = [];
//     for (let i = 0; i < numbers.length; i += 1) {
//
//         if (numbers[i] > value) {
//             newArray.push(numbers[i])
//         }
//     }
//     return newArray
// }
//     filterArray([1, 2, 3, 4, 5], 3); // [4, 5]


/*–§—É–Ω–∫—Ü–∏—è checkFruit(fruit) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ—Ä—É–∫—Ç–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä fruit),
–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –≤ –º–∞—Å—Å–∏–≤–µ fruits.
–î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–∫, —á—Ç–æ –µ—Å–ª–∏:
—Ñ—Ä—É–∫—Ç –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true;
—Ñ—Ä—É–∫—Ç–∞ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
*/

// function checkFruit(fruit) {
//     const fruits = ["apple", "plum", "pear", "orange"];
//     return fruits.includes(fruit)
// }
// checkFruit("plum") //true
// checkFruit("mandarin") //false

/*–û–±—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å—Å–∏–≤–æ–≤ –Ω–∞–∑—ã–≤–∞—é—Ç —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö –º–∞—Å—Å–∏–≤–∞—Ö.
–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–∞—Ö [1, 3, 5] –∏ [0, 8, 5, 3] –æ–±—â–∏–º–∏ –±—É–¥—É—Ç —á–∏—Å–ª–∞ 3 –∏ 5, —Ç.–∫. –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±–æ–∏—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö.
–ê —á–∏—Å–ª–∞ 0, 1 –∏ 8 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤.
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é getCommonElements(array1, array2) –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã array1 –∏ array2,
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ç–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±–æ–∏—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö.
*/

// function getCommonElements(array1, array2) {
//     newArray = []
//
//     for (let i = 0; i < array1.length; i+=1) {
//         if(array2.includes(array1[i])){
//             newArray.push(array1[i])
//         }
//     }
// return newArray
// }
//
// getCommonElements([1, 2, 3], [2, 4]) // [2]
// getCommonElements([1, 2, 3], [2, 1, 17, 19]) // [1, 2]

/*
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é getEvenNumbers(start, end)
–∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç start –¥–æ end.
–ß—ë—Ç–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ (10 % 2 === 0).
 */

// function getEvenNumbers(start, end) {
//     let array = []
//     for (let i = start; i <= end; i += 1) {
//         if (i % 2 === 0) {
//             array.push(i)
//
//         }
//     }
//     return array
// }
//
// // getEvenNumbers(2, 5) //[2, 4]
// getEvenNumbers(3, 11) // [4, 6, 8, 10]

// const start = 6;
// const end = 27;
// let number;
//
// for (let i = start; i < end; i += 1) {
//     if (i % 5 === 0) {
//         number = i;
//         break;
//     }
// }

/*
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é includes(array, value), –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ç–æ–∂–µ —Å–∞–º–æ–µ,
—á—Ç–æ –∏ –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –º–∞—Å—Å–∏–≤.includes(–∑–Ω–∞—á–µ–Ω–∏–µ) - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ array –∑–Ω–∞—á–µ–Ω–∏–µ value,
–≤–æ–∑–≤—Ä–∞—â–∞—è true –µ—Å–ª–∏ –µ—Å—Ç—å –∏ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ includes() –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤.includes(–∑–Ω–∞—á–µ–Ω–∏–µ).
*/
function includes(array, value) {

    for (const arrayElement of array) {
        if (arrayElement === value){
            // return true
            console.log(true)
        }
    }
    console.log(false)
    // return false
}

includes([1, 2, 3, 4, 5], 3) //true
//  includes([1, 2, 3, 4, 5], 17) //false